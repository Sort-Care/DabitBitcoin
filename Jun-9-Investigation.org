* Bitcoin
** Peer-to-Peer
The network timestamps transactions by hashing them into an ongoing chain of hash-based proof-of-work, forming a record that cannot be changed without redoing the proof-of-work. 
** Motivation
- suffers from the inherent weaknesses of the trust based model.
- The cost of mediation increases transaction costs, limiting the minimum practical transaction size and cutting off the possibility for small casual transactions, and there is a broader cost in the loss of ability to make non-reversible payments for nonreversible services
- What is needed is an electronic payment system based on cryptographic proof instead of trust, allowing any two willing parties to transact directly with each other without the need for a trusted third party
** Solution
using a peer-to-peer distributed timestamp server to generate computational proof of the chronological order of transactions. 

The system is secure as long as honest nodes collectively control more CPU power than any cooperating group of attacker nodes.
** Transactions
- Coin :: a chain of digital signatures
Each owner transfers the coin to the next by digitally signing a hash of the previous transaction and the public key of the next owner and adding these to the end of the coin.

A payee can verify the signatures to verify the chain of ownership.
** Issue Double-Spend
transactions must be publicly announced [1], and we need a system for participants to agree on a single history of the order in which they were received.
** Timestamp Server
A timestamp server works by taking a hash of a block of items to be timestamped and widely publishing the hash

Each timestamp includes the previous timestamp in its hash, forming a chain, with each additional timestamp reinforcing the ones before it.

It can:
+ proves that the data must have existed at the time
** Proof-of-Work
The proof-of-work involves scanning for a value that when hashed, such as with SHA-256, the hash begins with a number of zero bits.

incrementing a nonce in the block until a value is found that gives the block's hash the required zero bits

Once the CPU effort has been expended to make it satisfy the proof-of-work, the block cannot be changed without redoing the work

As later blocks are chained after it, the work to change the block would include redoing all the blocks after it

The proof-of-work also solves the problem of determining representation in majority decision making.

The majority decision is represented by the longest chain, which has the greatest proof-of-work effort invested in it. 

the proof-of-work difficulty is determined by a moving average targeting an average number of blocks per hour

** Network
1. New transactions are broadcast to all nodes
2. Each node collects new transactions into a block
3. Each node works on finding a difficult proof-of-work for its block
4. When a node finds a proof-of-work, it broadcasts the block to all nodes
5. Nodes accept the block only if *all transactions in it are valid and not already spent*
6. Nodes express their acceptance of the block by working on creating the next block in the chain, using the hash of the accepted block as the previous hash.

Always consider the longest chain to be the correct one and will keep working on extending it.

If two nodes broadcast different versions of the next block simultaneously, some nodes may receive one or the other first.
They work on the first one they received, but save the other branch in case it becomes longer

The tie will be broken when the next proofof-work is found and one branch becomes longer; the nodes that were working on the other
branch will then switch to the longer one.

** Reclaiming Disk Space
Once the latest transaction in a coin is buried under enough blocks, the spent transactions before it can be discarded to save disk space. 
*** Merkle Tree
[[https://en.wikipedia.org/wiki/Merkle_tree%5D%5D][Merkle Tree Wikipedia]]
To facilitate this without breaking the block's hash, transactions are hashed in a Merkle Tree [7][2][5], with only the root included in the block's hash.
Old blocks can then be compacted by stubbing off branches of the tree. The interior hashes do not need to be stored.

** Simplified Payment Verification
1. keep a copy of the block headers of the longest proof-of-work chain (querying network nodes until he's convinced he has the longest chain )
2. obtain the Merkle branch linking the transaction to the block it's timestamped in

As such, the verification is reliable as long as honest nodes control the network, but is more vulnerable if the network is overpowered by an attacker.
** Combining and Splitting Value
To allow value to be split and combined, transactions contain multiple inputs and outputs. 

It should be noted that fan-out, where a transaction depends on several transactions, and those transactions depend on many more, is not a problem here. There is never the need to extract a complete standalone copy of a transaction's history
** Privacy
The traditional banking model achieves a level of privacy by limiting access to information to the parties involved and the trusted third party

The necessity to announce all transactions publicly precludes this method, but privacy can still be maintained by breaking the flow of information in another place: *by keeping public keys anonymous*.

As an additional firewall, a new key pair should be used for each transaction to keep them from being linked to a common owner

Some linking is still unavoidable with multi-input transactions, which necessarily reveal that their inputs were owned by the same owner. The risk is that if the owner of a key is revealed, linking could reveal other transactions that belonged to the same owner.

** Calculations
consider the scenario of an attacker trying to generate an alternate chain faster than the honest chain
[[https://en.wikipedia.org/wiki/Gambler%27s_ruin][Gambler's Ruin]]

* Some Other Explainations
** What is Bitcoin Address?
A Bitcoin address is a single-use token. Like e-mail addresses, you can send bitcoins to a person by sending bitcoins to one of their addresses. However, unlike e-mail addresses, people have many different Bitcoin addresses and a unique address should be used for each transaction.

For example:
> 1B2S4Nf8jD3fshHodzuYhframoQsQaZEcZ
** What is Bitcoin Wallet ID?
A Wallet ID (also called your Wallet Identifier) acts similarly to a username you'd use to access your email, or log into Facebook. To log into your wallet, you'd use your Wallet ID, password, plus any form of Two Factor Authentication you've enabled.

It looks like a string of letters and numbers, like the sample Wallet ID below:
> 8a15ne4d-3d6c-6745-d282-da885h64pqf9


* Target
應用的場景舉例：

例如我們要做一個國際的交易所
需要一種能夠輕易的跨國的資金收發方式
能否用來作為收款 跟付款的用途？
Answer: Yes


例如要做一個類似 gumroad.com 的平台
但是收付款方式 我只想要使用BTC
能否使用這樣的SAAS來搭建？
Answer: Yes


問題1：
block.io能夠用在哪些場景？
Answer:
Block.io就是一个钱包服务，理论上来说，可以使用它来做一个内嵌在平台网站中的钱包。

Third-party API client
A third-party API client is one that interacts with bitcoin through a third-party system of application programming interfaces (APIs), rather than by connecting to the bitcoin network directly. The wallet may be stored by the user or by third-party servers, but all transactions go through a third party.

問題2:
做一個block.io 要如何做？


* Block.io
** My Notes
It seems like in order to use Block.io, a user should have a Block.io wallet so that each user can get a 

** Basic MultiSig Wallet API
Require two signatures: user's, Block.io's
** API keys

** dTrust Example Scripts
*Replies I got back from Block.io group*

Hi

Ofcourse. Keep in mind dTrust requires you to hold on to your keys securely since we do not keep any backups for you. If you are comfortable with that, please specify a programming language in which you would like to build your product, and we can provide example scripts to get you going.

The available languages for our SDKs are Ruby, Python, NodeJS, PHP.

Here are links for Nodejs and python respectively:
- https://github.com/BlockIo/block_io-nodejs/blob/master/examples/dtrust.js
- https://github.com/BlockIo/block_io-python/blob/master/examples/dtrust.py

** Install Block.io Lib
*** Install
#+BEGIN_SRC bash
npm install block_io@1.0.9-2
#+END_SRC

*** Initialize
#+BEGIN_SRC js
var BlockIo = require('block_io');
var version = 2; // API version
var block_io = new BlockIo('YOUR API KEY', 'YOUR SECRET PIN', version);
#+END_SRC
where API key can be found in Block.io Wallet and *secret PIN* is set by user.

*** Example Call
#+BEGIN_SRC js
block_io.get_new_address({'label': 'shibe1'}, console.log);
#+END_SRC

** Handling Bitcoin Address





* Bitcoin Edge Tutorials
https://bitcoinedge.org/tutorials



